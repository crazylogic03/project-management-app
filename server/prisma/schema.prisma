// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  profilePic  String?    
  boards      Board[]    @relation("BoardOwner")
  memberships BoardMember[]
  comments    Comment[]
  activities  Activity[]
  createdAt   DateTime   @default(now())
}

model Board {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  createdBy   Int
  owner       User         @relation("BoardOwner", fields: [createdBy], references: [id])
  lists       List[]
  members     BoardMember[]
  activities  Activity[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model BoardMember {
  id        Int      @id @default(autoincrement())
  role      String   @default("member")
  userId    Int
  boardId   Int
  user      User     @relation(fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, boardId]) 
}

model List {
  id        Int      @id @default(autoincrement())
  title     String
  position  Int
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id])
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  priority    String?     
  dueDate     DateTime?
  listId      Int
  list        List         @relation(fields: [listId], references: [id])
  comments    Comment[]
  attachments Attachment[]
  activities  Activity[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  cardId    Int
  userId    Int
  card      Card     @relation(fields: [cardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Attachment {
  id        Int      @id @default(autoincrement())
  fileUrl   String
  fileType  String?
  cardId    Int
  card      Card     @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())
}

model Activity {
  id        Int      @id @default(autoincrement())
  action    String   
  userId    Int
  boardId   Int
  cardId    Int?
  user      User     @relation(fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  card      Card?    @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())
}


